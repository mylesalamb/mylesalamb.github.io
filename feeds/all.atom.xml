<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Myles' Website</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2020-06-12T00:00:00+02:00</updated><entry><title>Installing docker on Fedora 32</title><link href="/docker-configuration.html" rel="alternate"></link><published>2020-06-12T00:00:00+02:00</published><updated>2020-06-12T00:00:00+02:00</updated><author><name>Myles</name></author><id>tag:None,2020-06-12:/docker-configuration.html</id><summary type="html">&lt;p class="first last"&gt;How to configure docker on a system running Fedora 32&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As of the time of writing the docker repos DO NOT have an entry for Fedora 32
.. raw:: html&lt;/p&gt;
&lt;blockquote&gt;
&amp;lt;br /&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;Recently, I have began learning docker. However upon attempting to install it, I ran into a few issues which resulted in me using an ubuntu server virtual machine, which was less than ideal
for what I was attempting. Below I will document what I did and how I solved the issues that I had ran into.&lt;/p&gt;
&lt;br /&gt;&lt;p&gt;First off before we start installing anything new it's best to run an update first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf -y update
&lt;span class="c1"&gt;#safer to restart your system after&lt;/span&gt;
sudo shutdown -r now
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we want to add the docker repo, so that we can install the packages we want&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf config-manager &lt;span class="se"&gt;\&lt;/span&gt;
--add-repo &lt;span class="se"&gt;\&lt;/span&gt;
https://download.docker.com/linux/fedora/docker-ce.repo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if we try to install docker-ce now, we get 404, as the repository does not contain entries for fedora 32 yet, we can opt to use the fedora 31
repos through the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/$releasever/31/g&amp;#39;&lt;/span&gt; /etc/yum.repos.d/docker-ce.repo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are not familiar with sed, all this does is goes through the entry yum/dnf has for the docker repo and replaces 32 with 31 -&amp;gt; hence we actually install packages from the fedora 31 repos.
Now we can install packages that we need from the docker repo, for instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf install docker-ce
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we also want to enable the docker service, we can do this without rebooting using the now arguement. We additionally may want to add ourselves to the group docker so we can use docker commands without sudo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; --now docker
sudo usermod -aG docker &lt;span class="k"&gt;$(&lt;/span&gt;whoami&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if we try to create a new container with some arbitrary image, like so, we may get a final error regarding cgroups, Since fedora 31, the default setting is for cgroup V2 to before
enabled by default. (cgroups is a feature implemented in the kernel that allows for the isolation of resources to a collection of processes, clearly this is useful when utilising containers)#
sadly this isnt supported by docker yet (at the time of writing).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm hello-world

&lt;span class="c1"&gt;# probably some image pull stuff here&lt;/span&gt;

docker: Error response from daemon: cgroups: cannot found cgroup mount destination: unknown.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to fix this we can revert back to cgroups V1 on the next reboot by providing an arguement to the kernel.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dnf install grubby
sudo grubby --update-kernel&lt;span class="o"&gt;=&lt;/span&gt;ALL --args&lt;span class="o"&gt;=&lt;/span&gt;”systemd.unified_cgroup_hierarchy&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now after all that we should be able to get the hello world image to work with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm hello-world
&lt;span class="c1"&gt;# this should work&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Technology"></category></entry><entry><title>Projects for summer</title><link href="/projects-for-summer.html" rel="alternate"></link><published>2020-06-03T17:43:00+02:00</published><updated>2020-06-03T17:43:00+02:00</updated><author><name>myles</name></author><id>tag:None,2020-06-03:/projects-for-summer.html</id><summary type="html">&lt;p class="first last"&gt;Planned projects for summer / Some ideas&lt;/p&gt;
</summary><content type="html">&lt;p&gt;To keep myself busy over summer, I came up with a few ideas for over summer in relation to programming. They are as follows.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This website: I have wanted to write my own website for a while but i was not much of a fan of github pages + jekyll offering, hence through using pre-commit hooks and branch trickery
one can use any other static site generator to acheive this. I opted to use Pelican as I like the Jinja templating engine (the same engine used for Django).&lt;/li&gt;
&lt;li&gt;Continuation of &amp;quot;IPoSMS&amp;quot;: I also want to explore the idea developed during the &amp;quot;Do you have the guts?&amp;quot; hackathon of 2019, where a mobile browser that operated over SMS was produced.
The original implementation utilised twilio, that while convenient, was actually quite costly (Our hackathon time expended about £75 in twilio credit over a single weekend).
Hence I purchased a GPRS shield in order to use a much cheaper pay as you go / contract sim. However this project requires a soldering iron, and due to current affairs I am unlikely
to be able to borrow one in the near future.&lt;/li&gt;
&lt;li&gt;Turning a VFD display (Customer display pole) into an alarm clock: I began looking into this project a while ago, however sourcing cheap customer display poles is somewhat
difficult. This is due to it being preferable to obtain a 'newer' model using USB for data transfer. This project intriques me as it is likely that one would need to write
a kernel module / driver for the display, and a minor application of reverse engineering assuming a vendor driver could be obtained for windows.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Programming"></category></entry><entry><title>Overly Complicated Hello World</title><link href="/overly-complicated-c.html" rel="alternate"></link><published>2020-05-24T10:22:00+02:00</published><updated>2010-05-24T18:40:00+02:00</updated><author><name>Myles</name></author><id>tag:None,2020-05-24:/overly-complicated-c.html</id><summary type="html">&lt;p class="first last"&gt;Boredom -&amp;gt; overly complicated C&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was bored so I wrote an overly complicated C program. This program was originally inspired by a challenge at University of Glasgow's 2019 hacker olympics, where one was to write the classic &amp;quot;Hello World&amp;quot; program,
but in the most convoluted manner possible.&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#define BACKSPACE '\r'  &lt;/span&gt;&lt;span class="c1"&gt;//ascii code for backspace
&lt;/span&gt;&lt;span class="cp"&gt;#define UPPER 126       &lt;/span&gt;&lt;span class="c1"&gt;//upper boundary for the chars we want to print
&lt;/span&gt;&lt;span class="cp"&gt;#define LOWER 32        &lt;/span&gt;&lt;span class="c1"&gt;//likewise lower
&lt;/span&gt;&lt;span class="cp"&gt;#define DELAY 10000     &lt;/span&gt;&lt;span class="c1"&gt;// 100ms sleep time
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="c1"&gt;//string we want to print to stdout
&lt;/span&gt;    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;outstr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UPPER&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;outstr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//continuously try to print the right character to stdout
&lt;/span&gt;        &lt;span class="c1"&gt;//for nice effect
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

            &lt;span class="c1"&gt;//make sure the line is clear
&lt;/span&gt;            &lt;span class="n"&gt;putc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BACKSPACE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;outstr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;outstr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;UPPER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;usleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DELAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;putc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
</content><category term="Programming"></category><category term="C"></category></entry></feed>